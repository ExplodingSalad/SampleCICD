name: template-pipeline

on:
  workflow_call:
    secrets:
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_ACCESS_TOKEN:
        required: true
      OPENSHIFT_SERVER:
        required: true
      OPENSHIFT_USERNAME:
        required: true
      OPENSHIFT_PASSWORD:
        required: true

jobs:
  extract-info:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract project name and version from pom.xml
        id: extract-info
        run: |
          project_name=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout)
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Original Project name: $project_name"
          echo "Original Project version: $version"
          # Remove -SNAPSHOT suffix if present
          release_version=${version%-SNAPSHOT}
          echo "Release version: $release_version"
          echo "::set-output name=project_name::$project_name"
          echo "::set-output name=version::$release_version"

    outputs:
      project_name: ${{ steps.extract-info.outputs.project_name }}
      version: ${{ steps.extract-info.outputs.version }}

#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#      - name: Upload JAR artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: build-artifact
#          path: target/*.jar
#
#  test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#      - name: Build with Maven
#        run: mvn verify
#
#  create-github-release:
#    runs-on: ubuntu-latest
#    needs: [extract-info, build]
#    if: github.ref == 'refs/heads/master'
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Java
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: Create GitHub Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: v${{ needs.extract-info.outputs.version }}
#          release_name: Release ${{ needs.extract-info.outputs.version }}
#          draft: false
#          prerelease: false
#          body: |
#            Release notes for version ${{ needs.extract-info.outputs.version }}.
#
#
#  build-and-push-docker-image:
#    runs-on: ubuntu-latest
#    needs: [extract-info, build, create-github-release]
#    if: github.ref == 'refs/heads/master'
#    environment: Secrets
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Download JAR artifact
#        uses: actions/download-artifact@v3
#        with:
#          name: build-artifact
#          path: target
#
#      - name: Set up Java
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: Log in to Docker Hub
#        run: |
#          echo ${{ secrets.DOCKER_HUB_USERNAME }}
#          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
#
#      - name: Build Docker image
#        run: |
#          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.extract-info.outputs.project_name }}:${{ needs.extract-info.outputs.version }} .
#
#      - name: Push Docker image to Docker Hub
#        run: |
#          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.extract-info.outputs.project_name }}:${{ needs.extract-info.outputs.version }}
#
#      - name: Tag the Docker image with latest
#        run: |
#          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.extract-info.outputs.project_name }}:${{ needs.extract-info.outputs.version }} ${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.extract-info.outputs.project_name }}:latest
#          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.extract-info.outputs.project_name }}:latest
#


  deployment:
    runs-on: ubuntu-latest
    needs: [
      extract-info
#      build,
#      create-github-release,
#      build-and-push-docker-image
    ]
    environment: Secrets

    env:
      OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
      OPENSHIFT_USERNAME: ${{ secrets.OPENSHIFT_USERNAME }}
      OPENSHIFT_PASSWORD: ${{ secrets.OPENSHIFT_PASSWORD }}
      OPENSHIFT_NAMESPACE: ""
      APP_NAME: "${{ needs.extract-info.outputs.project_name }}"
      APP_PORT: ""

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
        - name: Log in to OpenShift
          uses: redhat-actions/oc-login@v1
          with:
            openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
            openshift_username: ${{ env.OPENSHIFT_USER }}
            openshift_password: ${{ env.OPENSHIFT_PASSWORD }}
            insecure_skip_tls_verify: true
            namespace: ${{ env.OPENSHIFT_NAMESPACE }}

        - name: Create and expose app
          id: deploy-and-expose
          uses: redhat-actions/oc-new-app@v1
          with:
            app_name: ${{ env.APP_NAME }}
            image: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ needs.extract-info.outputs.project_name }}:latest
            namespace: ${{ env.OPENSHIFT_NAMESPACE }}
            port: ${{ env.APP_PORT }}

        - name: Print application URL
          env:
            ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
            SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}
          run: |
            [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
            echo
            echo "======================== Your application is available at: ========================"
            echo ${{ env.ROUTE }}
            echo "==================================================================================="
            echo
            echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""